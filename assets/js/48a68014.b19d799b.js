"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[670],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=o,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||r;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3171:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return p}});var a=n(3117),o=(n(7294),n(3905));const r={sidebar_label:"OpenID Connect"},i="OpenID Connect (OIDC)",l={unversionedId:"auth/oidc",id:"auth/oidc",title:"OpenID Connect (OIDC)",description:"OpenID Connect (OIDC) is an identity layer on top of the OAuth 2.0 protocol. It allows Clients to",source:"@site/docs/auth/oidc.md",sourceDirName:"auth",slug:"/auth/oidc",permalink:"/docs/auth/oidc",draft:!1,editUrl:"https://github.com/niomon/niomon-docs/blob/main/docs/auth/oidc.md",tags:[],version:"current",lastUpdatedAt:1657987593,formattedLastUpdatedAt:"Jul 16, 2022",frontMatter:{sidebar_label:"OpenID Connect"},sidebar:"docs",previous:{title:"Niomon Auth",permalink:"/docs/auth"},next:{title:"Sign-In with Ethereum",permalink:"/docs/auth/siwe"}},s={},p=[{value:"OIDC vs OAuth2",id:"oidc-vs-oauth2",level:2},{value:"Tokens",id:"tokens",level:2},{value:"OIDC Discovery",id:"oidc-discovery",level:2},{value:"Signing keys for JWTs",id:"signing-keys-for-jwts",level:2},{value:"OIDC Flows",id:"oidc-flows",level:2},{value:"OIDC Endpoints",id:"oidc-endpoints",level:2},{value:"Authorization endpoint",id:"authorization-endpoint",level:3},{value:"Token endpoint",id:"token-endpoint",level:3},{value:"UserInfo Endpoint",id:"userinfo-endpoint",level:3},{value:"Learn more",id:"learn-more",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"openid-connect-oidc"},"OpenID Connect (OIDC)"),(0,o.kt)("p",null,"OpenID Connect (OIDC) is an identity layer on top of the OAuth 2.0 protocol. It allows Clients to\nverify the identity of the End-User based on the authentication performed by an Authorization\nServer, as well as to obtain basic profile information about the End-User in an interoperable and\nREST-like manner."),(0,o.kt)("h2",{id:"oidc-vs-oauth2"},"OIDC vs OAuth2"),(0,o.kt)("p",null,"While OAuth 2.0 is about resource access and sharing, OIDC is about user authentication."),(0,o.kt)("p",null,"OIDC uses OAuth 2.0 as an underlying protocol and adds a few extensions on top of it. It adds a\nspecial scope value (",(0,o.kt)("inlineCode",{parentName:"p"},"openid"),"), the use of an extra token (the ID Token, which encapsulates the\nidentity claims in JSON format), and the emphasis on authentication rather than authorization.\nAlso, in OIDC, the term \u201cflow\u201d is used in place of OAuth2 \u201cgrant\u201d."),(0,o.kt)("h2",{id:"tokens"},"Tokens"),(0,o.kt)("p",null,"An OIDC provider (normally called the Identity Provider or IdP) performs user authentication, user\nconsent, and token issuance. The client or service requesting a user's identity is normally called\nthe Relying Party (RP). It can be a regular web application, a single-page web app, or a mobile\napp."),(0,o.kt)("p",null,"OpenID uses several types of tokens on top of OAuth 2.0 to provide a simple identity layer. This\nincludes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"ID Token"),": Specific to OIDC, this JWT format token provides the identity data describing a\nuser profile. The data about the authentication result and the user profile information are\ncalled claims. The user profile claims may be any data that is pertinent to the Relying Party\nfor identification purposes, such as a persistent ID, email address, name, etc. ID Tokens are\ndigitally signed to prevent tampering.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Access Token"),": Defined in OAuth2, this (optional) short lifetime token provides access to\nspecific user resources as defined in the scope values in the request to the authorization\nserver.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Refresh Token"),": Defined in OAuth2, this token is usually long-lived and may be used to\nobtain new access tokens."))),(0,o.kt)("h2",{id:"oidc-discovery"},"OIDC Discovery"),(0,o.kt)("p",null,"Niomon Auth supports the OIDC Discovery mechanism. The discovery document is located at:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET https://api.niomonid.com/YOUR_TENANT/.well-known/openid-configuration\n")),(0,o.kt)("h2",{id:"signing-keys-for-jwts"},"Signing keys for JWTs"),(0,o.kt)("p",null,"Niomon Auth uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"ES256")," algorithm (ECDSA using P-256 curve and SHA-256 hash algorithm) for\nJWTs by default."),(0,o.kt)("p",null,"The public keys of JWTs issued by Niomon Auth can be found on the JSON Web Key Set document located\nat:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET https://api.niomonid.com/YOUR_TENANT/.well-known/jwks.json\n")),(0,o.kt)("h2",{id:"oidc-flows"},"OIDC Flows"),(0,o.kt)("p",null,"OIDC defines several authentication flows for different types of applications and security\nrequirements. Niomon supports the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Authorization Code Flow"),": In this flow, tokens are not returned directly to the client.\nInstead, the server exchanges an Authorization Code for a token using a Client Secret."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Authorization Code Flow with PKCE"),": For public clients (e.g. single-page or mobile apps),\nthe ",(0,o.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc7636"},"Proof Key for Code Exchange")," (PKCE) flow is used\ninstead. This flow adds a secret (the Code Verifier) created by the client application that can\nbe verified by the authorization server.")),(0,o.kt)("h2",{id:"oidc-endpoints"},"OIDC Endpoints"),(0,o.kt)("h3",{id:"authorization-endpoint"},"Authorization endpoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET https://api.niomonid.com/YOUR_TENANT/oidc/authorize\n")),(0,o.kt)("p",null,"The Authorization Endpoint performs Authentication of the End-User. This is done by sending the\nUser Agent to the Authorization Server's Authorization Endpoint for Authentication and\nAuthorization, using request parameters defined by OAuth 2.0 and additional parameters and\nparameter values defined by OpenID Connect."),(0,o.kt)("p",null,"The request parameters are:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"scope")),(0,o.kt)("td",{parentName:"tr",align:null},"REQUIRED. OpenID Connect requests MUST contain the openid scope value.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"response_type")),(0,o.kt)("td",{parentName:"tr",align:null},"REQUIRED. OAuth 2.0 Response Type. When using the Authorization Code Flow, this value is ",(0,o.kt)("inlineCode",{parentName:"td"},"code"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"client_id")),(0,o.kt)("td",{parentName:"tr",align:null},"REQUIRED. OAuth 2.0 Client Identifier valid at the Authorization Server.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"redirect_uri")),(0,o.kt)("td",{parentName:"tr",align:null},"REQUIRED. Redirection URI to which the response will be sent.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"state")),(0,o.kt)("td",{parentName:"tr",align:null},"RECOMMENDED. Opaque value used to maintain state between the request and the callback.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"response_mode")),(0,o.kt)("td",{parentName:"tr",align:null},"OPTIONAL. Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"nonce")),(0,o.kt)("td",{parentName:"tr",align:null},"OPTIONAL. String value used to associate a Client session with an ID Token, and to mitigate replay attacks.")))),(0,o.kt)("p",null,"OIDC uses the following ",(0,o.kt)("inlineCode",{parentName:"p"},"request_mode")," parameter which is defined in ",(0,o.kt)("a",{parentName:"p",href:"https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html"},"OAuth 2.0 Multiple Response\nType Encoding Practices"),". It\ncan take the following values:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"query")),(0,o.kt)("td",{parentName:"tr",align:null},"Authorization Response parameters are encoded in the query string added to the ",(0,o.kt)("inlineCode",{parentName:"td"},"redirect_uri")," when redirecting back to the Client.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"web_message")),(0,o.kt)("td",{parentName:"tr",align:null},"This response mode is defined in ",(0,o.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/draft-sakimura-oauth-wmrm-00"},"OAuth 2.0 Web Message Response Mode specification"),". It uses HTML5 Web Messaging instead of the redirect for the authorization response.")))),(0,o.kt)("h3",{id:"token-endpoint"},"Token endpoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"POST https://api.niomonid.com/YOUR_TENANT/oidc/token\n")),(0,o.kt)("p",null,"he token endpoint is used by the client to obtain an access token by presenting its authorization\ngrant or refresh token."),(0,o.kt)("p",null,"Example request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http"},"POST /example/oidc/token HTTP/1.1\nHost: api.niomonid.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n")),(0,o.kt)("h3",{id:"userinfo-endpoint"},"UserInfo Endpoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET https://api.niomonid.com/YOUR_TENANT/oidc/userinfo\n")),(0,o.kt)("p",null,"The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the\nauthenticated End-User. To obtain the requested Claims about the End-User, the Client makes a\nrequest to the UserInfo Endpoint using an Access Token obtained through OpenID Connect\nAuthentication."),(0,o.kt)("p",null,"Example request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http"},"GET /example/oidc/userinfo HTTP/1.1\nHost: api.niomonid.com\nAuthorization: Bearer SlAV32hkKG\n")),(0,o.kt)("h2",{id:"learn-more"},"Learn more"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://openid.net/developers/specs/"},"OIDC Specifications"))))}u.isMDXComponent=!0}}]);